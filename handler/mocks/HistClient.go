// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	client "github.com/herzrasen/hist/client"

	io "io"

	mock "github.com/stretchr/testify/mock"

	record "github.com/herzrasen/hist/record"

	stats "github.com/herzrasen/hist/stats"
)

// HistClient is an autogenerated mock type for the HistClient type
type HistClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: options
func (_m *HistClient) Delete(options client.DeleteOptions) error {
	ret := _m.Called(options)

	var r0 error
	if rf, ok := ret.Get(0).(func(client.DeleteOptions) error); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: index
func (_m *HistClient) Get(index int64) (string, error) {
	ret := _m.Called(index)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (string, error)); ok {
		return rf(index)
	}
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Import provides a mock function with given fields: reader
func (_m *HistClient) Import(reader io.Reader) error {
	ret := _m.Called(reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Reader) error); ok {
		r0 = rf(reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: options
func (_m *HistClient) List(options client.ListOptions) ([]record.Record, error) {
	ret := _m.Called(options)

	var r0 []record.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(client.ListOptions) ([]record.Record, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(client.ListOptions) []record.Record); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]record.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(client.ListOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Record provides a mock function with given fields: command
func (_m *HistClient) Record(command string) error {
	ret := _m.Called(command)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stats provides a mock function with given fields:
func (_m *HistClient) Stats() (*stats.Stats, error) {
	ret := _m.Called()

	var r0 *stats.Stats
	var r1 error
	if rf, ok := ret.Get(0).(func() (*stats.Stats, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *stats.Stats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*stats.Stats)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tidy provides a mock function with given fields:
func (_m *HistClient) Tidy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHistClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewHistClient creates a new instance of HistClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHistClient(t mockConstructorTestingTNewHistClient) *HistClient {
	mock := &HistClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
